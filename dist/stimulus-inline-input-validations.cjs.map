{
  "version": 3,
  "sources": ["../src/index.js", "../src/input_validator.js", "../src/validations/validate.js"],
  "sourcesContent": ["export { default as InputValidator } from './input_validator'\n", "import { Controller } from \"@hotwired/stimulus\";\nimport Validate from \"./validations/validate\";\n\n// Connects to data-controller=\"input-validator\"\nexport default class extends Controller {\n  static targets = [\"textField\", \"errors\"];\n\n  connect() {\n    this.textFieldTargets.forEach((field) => {\n      field.setAttribute(\"data-action\", \"input->input-validator#validateInput\");\n\n      field.addEventListener(\"blur\", (event) => {\n        this.validateInput(event);\n      });\n    });\n  }\n\n  handleJSONValidations(value, validations, errors) {\n    validations.forEach((validation) => {\n      let [validationType] = Object.keys(validation);\n\n      switch (validationType) {\n        case \"presence\":\n          if (validation.presence) {\n            Validate.presence(value, errors);\n          }\n          break;\n        case \"length\":\n          if (validation.length.min && validation.length.max) {\n            Validate.length(value, validation.length, errors);\n          } else {\n            console.log(\n              `Couldn't validate length (missing keys min or max)`\n            );\n          }\n          break;\n        case \"numericality\":\n          if (validation.numericality) {\n            Validate.numericality(value, errors);\n          }\n          break;\n        case \"email\":\n          if (validation.email) {\n            Validate.email(value, errors);\n          }\n          break;\n        case \"strong_password\":\n          if (validation.strong_password) {\n            Validate.strongPassword(value, errors);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  handleValidations(target, value, errors) {\n    if (\n      target.hasAttribute(\"data-validates-presence\") &&\n      target.getAttribute(\"data-validates-presence\") != \"false\"\n    ) {\n      Validate.presence(value, errors);\n    }\n\n    if (\n      target.hasAttribute(\"data-validates-length\") &&\n      target.getAttribute(\"data-validates-length\").length > 2\n    ) {\n      const [min, max] = target\n        .getAttribute(\"data-validates-length\")\n        .split(\",\")\n        .map(Number);\n\n      Validate.length(value, { min, max }, errors);\n    }\n\n    if (\n      target.hasAttribute(\"data-validates-numericality\") &&\n      target.getAttribute(\"data-validates-numericality\") != \"false\"\n    ) {\n      Validate.numericality(value, errors);\n    }\n\n    if (\n      target.hasAttribute(\"data-validates-email\") &&\n      target.getAttribute(\"data-validates-email\") != \"false\"\n    ) {\n      Validate.email(value, errors);\n    }\n\n    if (\n      target.hasAttribute(\"data-validates-strong-password\") &&\n      target.getAttribute(\"data-validates-strong-password\") != \"false\"\n    ) {\n      Validate.strongPassword(value, errors);\n    }\n  }\n\n  errorElement(errorsContainer, error) {\n    let styles = \"font-size: 14px; color: red\";\n    let classes;\n\n    if (errorsContainer.hasAttribute(\"data-errors-styles-css\")) {\n      styles = errorsContainer.getAttribute(\"data-errors-styles-css\");\n    }\n\n    if (errorsContainer.hasAttribute(\"data-errors-styles-class\")) {\n      styles = null;\n      classes = errorsContainer.getAttribute(\"data-errors-styles-class\");\n    }\n\n    return `<div error=\"${error.type}\" ${\n      styles ? \"style='\" + styles + \"'\" : \"\"\n    } ${classes ? \"class='\" + classes + \"'\" : \"\"} >${error.message}</div>`;\n  }\n\n  validateInput({ target, target: { value } }) {\n    let errors = [];\n    let field = target.getAttribute(\"data-field\");\n    let [errorsContainer] = this.errorsTargets.filter(\n      (item) => item.getAttribute(\"data-field\") == field\n    );\n\n    if (target.hasAttribute(\"data-validations\")) {\n      try {\n        let validations = JSON.parse(target.getAttribute(\"data-validations\"));\n        this.handleJSONValidations(value, validations, errors);\n      } catch (error) {\n        console.log(error);\n        console.log(\n          `Error parsing JSON string on the data-validations attribute on data-field=\"${field}\". Is the json string formatted properly?`\n        );\n        return;\n      }\n    } else {\n      this.handleValidations(target, value, errors);\n    }\n\n    errorsContainer.innerHTML = ``;\n\n    if (errors.length) {\n      errors.forEach((error) => {\n        errorsContainer.innerHTML += this.errorElement(errorsContainer, error);\n        errorsContainer.style.visibility = \"visible\";\n      });\n    } else {\n      errorsContainer.style.visibility = \"invisible\";\n    }\n  }\n}\n", "const Validate = {\n  presence(value, errors) {\n    if (value.trim().length === 0) {\n      errors.push({ type: \"presence\", message: \"Can't be blank\" });\n    }\n  },\n\n  length(value, length, errors) {\n    if (value.length < length.min) {\n      errors.push({\n        type: \"length-min\",\n        message: `Too short. Minimum ${length.min} characters`,\n      });\n    }\n    if (value.length > length.max) {\n      errors.push({\n        type: \"length-max\",\n        message: `Too long. Maximum ${length.max} characters`,\n      });\n    }\n  },\n\n  numericality(value, errors) {\n    const numberRegex = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/;\n\n    if (!numberRegex.test(value)) {\n      errors.push({ type: \"numericality\", message: \"Must be a number\" });\n    }\n  },\n\n  email(value, errors) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n    if (!emailRegex.test(value)) {\n      errors.push({ type: \"email\", message: \"Invalid email format\" });\n    }\n  },\n\n  strongPassword(value, errors) {\n    const capitalLetterRegex = /[A-Z]/;\n    const numberRegex = /[0-9]/;\n    const specialCharacterRegex = /[!@#$%^&*]/;\n\n    if (value.length < 10) {\n      errors.push({ type: \"strong-password-length\", message: \"Must be at least 10 characters long\" });\n    }\n\n    if (!capitalLetterRegex.test(value)) {\n      errors.push({ type: \"strong-password-capital-letter\", message: \"Must contain at least one capital letter (A-Z)\" });\n    }\n\n    if (!numberRegex.test(value)) {\n      errors.push({ type: \"strong-password-number\", message: \"Must contain at least one number\" });\n    }\n\n    if (!specialCharacterRegex.test(value)) {\n      errors.push({ type: \"strong-password-special-character\", message: \"Must contain at least one special character (!@#$%^&*)\" });\n    }\n  },\n};\n\nexport default Validate;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "input_validator_default", "__toCommonJS", "import_stimulus", "Validate", "value", "errors", "length", "capitalLetterRegex", "numberRegex", "specialCharacterRegex", "validate_default", "input_validator_default", "field", "event", "value", "validations", "errors", "validation", "validationType", "validate_default", "target", "min", "max", "errorsContainer", "error", "styles", "classes", "item", "__publicField"]
}
