{
  "version": 3,
  "sources": ["../src/input_validator.js", "../src/helpers/regex.js", "../src/validations/validate.js"],
  "sourcesContent": ["import { Controller } from '@hotwired/stimulus'\nimport Validate from './validations/validate'\nimport Regex from './helpers/regex'\n\n// Connects to data-controller=\"input-validator\"\nexport default class extends Controller {\n  static targets = ['field', 'errors']\n\n  connect () {\n    this.fieldTargets.forEach((field) => {\n      field.setAttribute('data-action', 'input->input-validator#validateInput')\n\n      field.addEventListener('blur', (event) => {\n        this.validateInput(event)\n      })\n    })\n  }\n\n  handleJSONValidations (value, validations, errors) {\n    validations.forEach((validation) => {\n      const [validationType] = Object.keys(validation)\n\n      switch (validationType) {\n        case 'presence':\n          if (validation.presence) {\n            Validate.presence(value, errors)\n          }\n          break\n        case 'length':\n          if (validation.length.min && validation.length.max) {\n            Validate.length(value, validation.length, errors)\n          } else {\n            console.log(\"Couldn't validate length (missing keys min or max)\")\n          }\n          break\n        case 'numericality':\n          if (validation.numericality) {\n            Validate.numericality(value, errors)\n          }\n          break\n        case 'email':\n          if (validation.email) {\n            Validate.email(value, errors)\n          }\n          break\n        case 'strong_password':\n          if (validation.strong_password) {\n            Validate.strongPassword(value, errors)\n          }\n          break\n        default:\n          break\n      }\n    })\n  }\n\n  handleValidations (target, value, errors) {\n    if (\n      target.hasAttribute('data-validates-presence') &&\n      target.getAttribute('data-validates-presence') !== 'false'\n    ) {\n      Validate.presence(value, errors)\n    }\n\n    if (\n      target.hasAttribute('data-validates-length') &&\n      target.getAttribute('data-validates-length').length > 2\n    ) {\n      const [min, max] = target\n        .getAttribute('data-validates-length')\n        .split(',')\n        .map(Number)\n\n      Validate.length(value, { min, max }, errors)\n    }\n\n    if (\n      target.hasAttribute('data-validates-numericality') &&\n      target.getAttribute('data-validates-numericality') !== 'false'\n    ) {\n      Validate.numericality(value, errors)\n    }\n\n    if (\n      target.hasAttribute('data-validates-email') &&\n      target.getAttribute('data-validates-email') !== 'false'\n    ) {\n      Validate.email(value, errors)\n    }\n\n    if (\n      target.hasAttribute('data-validates-strong-password') &&\n      target.getAttribute('data-validates-strong-password') !== 'false'\n    ) {\n      Validate.strongPassword(value, errors)\n    }\n  }\n\n  errorElement (errorsContainer, error) {\n    let styles = 'font-size: 14px; color: red'\n    let classes\n\n    if (errorsContainer.hasAttribute('data-errors-styles-css')) {\n      styles = errorsContainer.getAttribute('data-errors-styles-css')\n    }\n\n    if (errorsContainer.hasAttribute('data-errors-styles-class')) {\n      styles = null\n      classes = errorsContainer.getAttribute('data-errors-styles-class')\n    }\n\n    return `<div error=\"${error.type}\" ${\n      styles ? \"style='\" + styles + \"'\" : ''\n    } ${classes ? \"class='\" + classes + \"'\" : ''} >${error.message}</div>`\n  }\n\n  validateInput ({ target, target: { value } }) {\n    const errors = []\n    const field = target.getAttribute('data-field')\n\n    if (!field) {\n      console.log(\n        'one or more <input> elements are the missing data-field=\"\" attribute.'\n      )\n      return\n    }\n\n    const [errorsContainer] = this.errorsTargets.filter(\n      (item) => item.getAttribute('data-field') === field\n    )\n\n    if (target.hasAttribute('data-validations')) {\n      try {\n        let validations = target.getAttribute('data-validations')\n\n        if (Regex.singleQuotes.test(validations)) {\n          validations = validations.replace(/'/g, '\"')\n        }\n\n        this.handleJSONValidations(value, JSON.parse(validations), errors)\n      } catch (error) {\n        console.log(error)\n        console.log(\n          `Error parsing JSON string on the data-validations attribute on data-field=\"${field}\". Is the json string formatted properly?`\n        )\n        return\n      }\n    } else {\n      this.handleValidations(target, value, errors)\n    }\n\n    errorsContainer.innerHTML = ''\n\n    if (errors.length) {\n      errors.forEach((error) => {\n        errorsContainer.innerHTML += this.errorElement(errorsContainer, error)\n        errorsContainer.style.visibility = 'visible'\n      })\n    } else {\n      errorsContainer.style.visibility = 'invisible'\n    }\n  }\n}\n", "const Regex = {\n  numericality: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/,\n  email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n  singleNumber: /[0-9]/,\n  singleCapitalLetter: /[A-Z]/,\n  singleSpecialCharacter: /[!@#$%^&*]/,\n  singleQuotes: /'/\n}\n\nexport default Regex\n", "import Regex from '../helpers/regex'\n\nconst Validate = {\n  presence (value, errors) {\n    if (value.trim().length === 0) {\n      errors.push({ type: 'presence', message: \"Can't be blank\" })\n    }\n  },\n\n  length (value, length, errors) {\n    if (value.length < length.min) {\n      errors.push({\n        type: 'length-min',\n        message: `Too short. Minimum ${length.min} characters`\n      })\n    }\n    if (value.length > length.max) {\n      errors.push({\n        type: 'length-max',\n        message: `Too long. Maximum ${length.max} characters`\n      })\n    }\n  },\n\n  numericality (value, errors) {\n    if (!Regex.numericality.test(value)) {\n      errors.push({ type: 'numericality', message: 'Must be a number' })\n    }\n  },\n\n  email (value, errors) {\n    if (!Regex.email.test(value)) {\n      errors.push({ type: 'email', message: 'Invalid email format' })\n    }\n  },\n\n  strongPassword (value, errors) {\n    if (value.length < 10) {\n      errors.push({ type: 'strong-password-length', message: 'Must be at least 10 characters long' })\n    }\n\n    if (!Regex.singleCapitalLetter.test(value)) {\n      errors.push({ type: 'strong-password-capital-letter', message: 'Must contain at least one capital letter (A-Z)' })\n    }\n\n    if (!Regex.singleNumber.test(value)) {\n      errors.push({ type: 'strong-password-number', message: 'Must contain at least one number' })\n    }\n\n    if (!Regex.singleSpecialCharacter.test(value)) {\n      errors.push({ type: 'strong-password-special-character', message: 'Must contain at least one special character (!@#$%^&*)' })\n    }\n  }\n}\n\nexport default Validate\n"],
  "mappings": "wKAAA,OAAS,cAAAA,MAAkB,qBCA3B,IAAMC,EAAQ,CACZ,aAAc,4CACd,MAAO,mDACP,aAAc,QACd,oBAAqB,QACrB,uBAAwB,aACxB,aAAc,GAChB,EAEOC,EAAQD,ECPf,IAAME,EAAW,CACf,SAAUC,EAAOC,EAAQ,CACnBD,EAAM,KAAK,EAAE,SAAW,GAC1BC,EAAO,KAAK,CAAE,KAAM,WAAY,QAAS,gBAAiB,CAAC,CAE/D,EAEA,OAAQD,EAAOE,EAAQD,EAAQ,CACzBD,EAAM,OAASE,EAAO,KACxBD,EAAO,KAAK,CACV,KAAM,aACN,QAAS,sBAAsBC,EAAO,GAAG,aAC3C,CAAC,EAECF,EAAM,OAASE,EAAO,KACxBD,EAAO,KAAK,CACV,KAAM,aACN,QAAS,qBAAqBC,EAAO,GAAG,aAC1C,CAAC,CAEL,EAEA,aAAcF,EAAOC,EAAQ,CACtBE,EAAM,aAAa,KAAKH,CAAK,GAChCC,EAAO,KAAK,CAAE,KAAM,eAAgB,QAAS,kBAAmB,CAAC,CAErE,EAEA,MAAOD,EAAOC,EAAQ,CACfE,EAAM,MAAM,KAAKH,CAAK,GACzBC,EAAO,KAAK,CAAE,KAAM,QAAS,QAAS,sBAAuB,CAAC,CAElE,EAEA,eAAgBD,EAAOC,EAAQ,CACzBD,EAAM,OAAS,IACjBC,EAAO,KAAK,CAAE,KAAM,yBAA0B,QAAS,qCAAsC,CAAC,EAG3FE,EAAM,oBAAoB,KAAKH,CAAK,GACvCC,EAAO,KAAK,CAAE,KAAM,iCAAkC,QAAS,gDAAiD,CAAC,EAG9GE,EAAM,aAAa,KAAKH,CAAK,GAChCC,EAAO,KAAK,CAAE,KAAM,yBAA0B,QAAS,kCAAmC,CAAC,EAGxFE,EAAM,uBAAuB,KAAKH,CAAK,GAC1CC,EAAO,KAAK,CAAE,KAAM,oCAAqC,QAAS,wDAAyD,CAAC,CAEhI,CACF,EAEOG,EAAQL,EFlDf,IAAOM,EAAP,cAA6BC,CAAW,CAGtC,SAAW,CACT,KAAK,aAAa,QAASC,GAAU,CACnCA,EAAM,aAAa,cAAe,sCAAsC,EAExEA,EAAM,iBAAiB,OAASC,GAAU,CACxC,KAAK,cAAcA,CAAK,CAC1B,CAAC,CACH,CAAC,CACH,CAEA,sBAAuBC,EAAOC,EAAaC,EAAQ,CACjDD,EAAY,QAASE,GAAe,CAClC,GAAM,CAACC,CAAc,EAAI,OAAO,KAAKD,CAAU,EAE/C,OAAQC,EAAgB,CACtB,IAAK,WACCD,EAAW,UACbE,EAAS,SAASL,EAAOE,CAAM,EAEjC,MACF,IAAK,SACCC,EAAW,OAAO,KAAOA,EAAW,OAAO,IAC7CE,EAAS,OAAOL,EAAOG,EAAW,OAAQD,CAAM,EAEhD,QAAQ,IAAI,oDAAoD,EAElE,MACF,IAAK,eACCC,EAAW,cACbE,EAAS,aAAaL,EAAOE,CAAM,EAErC,MACF,IAAK,QACCC,EAAW,OACbE,EAAS,MAAML,EAAOE,CAAM,EAE9B,MACF,IAAK,kBACCC,EAAW,iBACbE,EAAS,eAAeL,EAAOE,CAAM,EAEvC,MACF,QACE,KACJ,CACF,CAAC,CACH,CAEA,kBAAmBI,EAAQN,EAAOE,EAAQ,CAQxC,GANEI,EAAO,aAAa,yBAAyB,GAC7CA,EAAO,aAAa,yBAAyB,IAAM,SAEnDD,EAAS,SAASL,EAAOE,CAAM,EAI/BI,EAAO,aAAa,uBAAuB,GAC3CA,EAAO,aAAa,uBAAuB,EAAE,OAAS,EACtD,CACA,GAAM,CAACC,EAAKC,CAAG,EAAIF,EAChB,aAAa,uBAAuB,EACpC,MAAM,GAAG,EACT,IAAI,MAAM,EAEbD,EAAS,OAAOL,EAAO,CAAE,IAAAO,EAAK,IAAAC,CAAI,EAAGN,CAAM,CAC7C,CAGEI,EAAO,aAAa,6BAA6B,GACjDA,EAAO,aAAa,6BAA6B,IAAM,SAEvDD,EAAS,aAAaL,EAAOE,CAAM,EAInCI,EAAO,aAAa,sBAAsB,GAC1CA,EAAO,aAAa,sBAAsB,IAAM,SAEhDD,EAAS,MAAML,EAAOE,CAAM,EAI5BI,EAAO,aAAa,gCAAgC,GACpDA,EAAO,aAAa,gCAAgC,IAAM,SAE1DD,EAAS,eAAeL,EAAOE,CAAM,CAEzC,CAEA,aAAcO,EAAiBC,EAAO,CACpC,IAAIC,EAAS,8BACTC,EAEJ,OAAIH,EAAgB,aAAa,wBAAwB,IACvDE,EAASF,EAAgB,aAAa,wBAAwB,GAG5DA,EAAgB,aAAa,0BAA0B,IACzDE,EAAS,KACTC,EAAUH,EAAgB,aAAa,0BAA0B,GAG5D,eAAeC,EAAM,IAAI,KAC9BC,EAAS,UAAYA,EAAS,IAAM,EACtC,IAAIC,EAAU,UAAYA,EAAU,IAAM,EAAE,KAAKF,EAAM,OAAO,QAChE,CAEA,cAAe,CAAE,OAAAJ,EAAQ,OAAQ,CAAE,MAAAN,CAAM,CAAE,EAAG,CAC5C,IAAME,EAAS,CAAC,EACVJ,EAAQQ,EAAO,aAAa,YAAY,EAE9C,GAAI,CAACR,EAAO,CACV,QAAQ,IACN,uEACF,EACA,MACF,CAEA,GAAM,CAACW,CAAe,EAAI,KAAK,cAAc,OAC1CI,GAASA,EAAK,aAAa,YAAY,IAAMf,CAChD,EAEA,GAAIQ,EAAO,aAAa,kBAAkB,EACxC,GAAI,CACF,IAAIL,EAAcK,EAAO,aAAa,kBAAkB,EAEpDQ,EAAM,aAAa,KAAKb,CAAW,IACrCA,EAAcA,EAAY,QAAQ,KAAM,GAAG,GAG7C,KAAK,sBAAsBD,EAAO,KAAK,MAAMC,CAAW,EAAGC,CAAM,CACnE,OAASQ,EAAO,CACd,QAAQ,IAAIA,CAAK,EACjB,QAAQ,IACN,8EAA8EZ,CAAK,2CACrF,EACA,MACF,MAEA,KAAK,kBAAkBQ,EAAQN,EAAOE,CAAM,EAG9CO,EAAgB,UAAY,GAExBP,EAAO,OACTA,EAAO,QAASQ,GAAU,CACxBD,EAAgB,WAAa,KAAK,aAAaA,EAAiBC,CAAK,EACrED,EAAgB,MAAM,WAAa,SACrC,CAAC,EAEDA,EAAgB,MAAM,WAAa,WAEvC,CACF,EA5JEM,EADKnB,EACE,UAAU,CAAC,QAAS,QAAQ",
  "names": ["Controller", "Regex", "regex_default", "Validate", "value", "errors", "length", "regex_default", "validate_default", "input_validator_default", "Controller", "field", "event", "value", "validations", "errors", "validation", "validationType", "validate_default", "target", "min", "max", "errorsContainer", "error", "styles", "classes", "item", "regex_default", "__publicField"]
}
