var h=Object.defineProperty;var c=(t,r,e)=>r in t?h(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e;var n=(t,r,e)=>(c(t,typeof r!="symbol"?r+"":r,e),e);import{Controller as m}from"@hotwired/stimulus";async function l(t,r,e,a){t&&t.getAttribute("data-validate-presence")!="false"&&(console.log("should do soething"),e.trim().length===0&&(a.innerHTML+=`<div class="text-sm text-red-500">Can't be blank</div>`,a.classList.remove("hidden")))}var o=t=>t.getAttribute("data-field");var i=class extends m{connect(){this.textFieldTargets.forEach(t=>{t.setAttribute("data-action","input->input-validator#validateInput")})}getErrors(t,r){let e=[];return r.forEach(a=>{switch(Object.keys(a)[0]){case"presence":t.trim().length===0&&e.push("Can't be blank");break;case"length":a.length.min&&t.length<a.length.min&&e.push(`Too short. Minimum ${a.length.min} characters`),a.length.max&&t.length>a.length.max&&e.push(`Too long. Maximum ${a.length.max} characters`);break;default:break}}),e}handleValidationsList(t,r,e,a){t.hasAttribute("data-validate-presence")&&l(t,r,e,a)}validateInput({params:{validations:t},target:r,target:{value:e}}){let a=o(r),[s]=this.errorsTargets.filter(d=>d.getAttribute("data-field")==a);this.handleValidationsList(r,a,e,s)}};n(i,"targets",["textField","errors"]);export{i as InputValidator};
