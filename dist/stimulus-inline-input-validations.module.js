var o=Object.defineProperty;var c=(t,e,a)=>e in t?o(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a;var d=(t,e,a)=>(c(t,typeof e!="symbol"?e+"":e,a),a);import{Controller as h}from"@hotwired/stimulus";var m={presence(t,e){t.trim().length===0&&e.push({type:"presence",message:"Can't be blank"})},length(t,e,a){t.length<e.min&&a.push({type:"length-min",message:`Too short. Minimum ${e.min} characters`}),t.length>e.max&&a.push({type:"length-max",message:`Too long. Maximum ${e.max} characters`})},numericality(t,e){/^[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$/.test(t)||e.push({type:"numericality",message:"Must be a number"})},email(t,e){/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(t)||e.push({type:"email",message:"Invalid email format"})},strongPassword(t,e){let a=/[!@#$%^&*]/,s=/[A-Z]/;t.length<10&&e.push({type:"strong-password-length",message:"Must be at least 10 characters long"}),a.test(t)||e.push({type:"strong-password-special-character",message:"Must contain at least one special character (!@#$%^&*)"}),s.test(t)||e.push({type:"strong-password-capital-letter",message:"Must contain at least one capital letter (A-Z)"})}},i=m;var r=class extends h{connect(){this.textFieldTargets.forEach(t=>{t.setAttribute("data-action","input->input-validator#validateInput"),t.addEventListener("blur",e=>{this.validateInput(e)})})}handleJSONValidations(t,e,a){e.forEach(s=>{let[l]=Object.keys(s);switch(l){case"presence":s.presence&&i.presence(t,a);break;case"length":s.length.min&&s.length.max?i.length(t,s.length,a):console.log("Couldn't validate length (missing keys min or max)");break;case"numericality":s.numericality&&i.numericality(t,a);break;case"email":s.email&&i.email(t,a);break;case"strong_password":s.strong_password&&i.strongPassword(t,a);break;default:break}})}handleValidations(t,e,a){if(t.hasAttribute("data-validate-presence")&&t.getAttribute("data-validate-presence")!="false"&&i.presence(e,a),t.hasAttribute("data-validate-length")&&t.getAttribute("data-validate-length").length>2){let[s,l]=t.getAttribute("data-validate-length").split(",").map(Number);i.length(e,{min:s,max:l},a)}t.hasAttribute("data-validate-numericality")&&t.getAttribute("data-validate-numericality")!="false"&&i.numericality(e,a),t.hasAttribute("data-validate-email")&&t.getAttribute("data-validate-email")!="false"&&i.email(e,a),t.hasAttribute("data-validate-strong-password")&&t.getAttribute("data-validate-strong-password")!="false"&&i.strongPassword(e,a)}errorElement(t,e){let a="font-size: 14px; color: red",s;return t.hasAttribute("data-errors-styles-css")&&(a=t.getAttribute("data-errors-styles-css")),t.hasAttribute("data-errors-styles-class")&&(a=null,s=t.getAttribute("data-errors-styles-class")),`<div error="${e.type}" ${a?"style='"+a+"'":""} ${s?"class='"+s+"'":""} >${e.message}</div>`}validateInput({target:t,target:{value:e}}){let a=[],s=t.getAttribute("data-field"),[l]=this.errorsTargets.filter(n=>n.getAttribute("data-field")==s);if(t.hasAttribute("data-validations"))try{let n=JSON.parse(t.getAttribute("data-validations"));this.handleJSONValidations(e,n,a)}catch(n){console.log(n),console.log(`Error parsing JSON string on the data-validations attribute on data-field="${s}". Is the json string formatted properly?`);return}else this.handleValidations(t,e,a);l.innerHTML="",a.length?a.forEach(n=>{l.innerHTML+=this.errorElement(l,n),l.style.visibility="visible"}):l.style.visibility="invisible"}};d(r,"targets",["textField","errors"]);export{r as InputValidator};
