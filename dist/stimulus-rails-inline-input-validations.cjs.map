{
  "version": 3,
  "sources": ["../src/index.js", "../src/input_validator.js", "../src/validations/standard_validations.js", "../src/helpers/node_helper.js"],
  "sourcesContent": ["export { default as InputValidator } from './input_validator'\n", "import { Controller } from \"@hotwired/stimulus\";\nimport StandardValidations from \"./validations/standard_validations\";\nimport RailsValidations from \"./validations/rails_validations\"\nimport { getField } from \"./helpers/node_helper\";\n\n// Connects to data-controller=\"input-validator\"\nexport default class extends Controller {\n  static targets = [\"textField\", \"errors\"];\n\n  connect() {\n    this.textFieldTargets.forEach((field) => {\n      field.setAttribute(\"data-action\", \"input->input-validator#validateInput\");\n    });\n  }\n\n  // getErrors(value, validations) {\n  //   let errors = [];\n  //   validations.forEach((validation) => {\n  //     const validationName = Object.keys(validation)[0];\n  //     switch (validationName) {\n  //       case \"presence\":\n  //         if (value.trim().length === 0) errors.push(\"Can't be blank\");\n  //         break;\n  //       case \"length\":\n  //         if (validation.length.min && value.length < validation.length.min) {\n  //           errors.push(\n  //             `Too short. Minimum ${validation.length.min} characters`\n  //           );\n  //         }\n  //         if (validation.length.max && value.length > validation.length.max) {\n  //           errors.push(\n  //             `Too long. Maximum ${validation.length.max} characters`\n  //           );\n  //         }\n  //         break;\n  //       default:\n  //         break;\n  //     }\n  //   });\n\n  //   return errors;\n  // }\n\n  validateInput({ params: { validations }, target }) {\n    let field = getField(target);\n    let [errorsContainer] = this.errorsTargets.filter(\n      (item) => item.getAttribute(\"data-field\") == field\n    );\n\n    errorsContainer.innerHTML = ``\n\n    let errors = []\n\n    if (target.hasAttribute(\"data-validate-presence\")) {\n      StandardValidations.presence(target, errors);\n    }\n\n    if (target.hasAttribute(\"data-validate-length\")) {\n      StandardValidations.length(target, errors);\n    }\n\n    if (target.hasAttribute(\"data-validate-numericality\")) {\n      StandardValidations.numericality(target, errors);\n    }\n\n    console.log(\"errors\", errors)\n    if(errors.length) {\n      errors.forEach(error => {\n      errorsContainer.innerHTML += `<div class=\"text-sm text-red-500\">${error}</div>`;\n      errorsContainer.style.visibility = \"visible\"\n    })\n    } else {\n      errorsContainer.style.visibility = \"invisible\"\n    }\n  }\n}\n", "const StandardValidations = {\n  presence(target, errors) {\n    if (!target) return;\n    if (target.getAttribute(\"data-validate-presence\") == \"false\") return;\n\n    if (target.value.trim().length === 0) {\n      errors.push(\"Can't be blank\");\n    }\n  },\n\n  length(target, errors) {\n    if (!target) return;\n    if (!target.hasAttribute(\"data-validate-length\")) return;\n\n    let [min, max] = target.getAttribute(\"data-validate-length\").split(\",\");\n\n    if (target.value.length < min) {\n      errors.push(`Too short. Minimum ${min} characters`);\n    }\n    if (target.value.length > max) {\n      errors.push(`Too long. Maximum ${max} characters`);\n    }\n  },\n\n  numericality(target, errors) {\n    const numberRegex = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/;\n\n    if (!numberRegex.test(target.value)) {\n      errors.push(\"Must be a number\");\n    }\n  },\n};\n\nexport default StandardValidations;\n", "export const getField = (target) => {\n  return target.getAttribute(\"data-field\")\n}\n\n"],
  "mappings": "wiBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAA2B,8BCA3B,IAAMC,EAAsB,CAC1B,SAASC,EAAQC,EAAQ,CAClBD,GACDA,EAAO,aAAa,wBAAwB,GAAK,SAEjDA,EAAO,MAAM,KAAK,EAAE,SAAW,GACjCC,EAAO,KAAK,gBAAgB,CAEhC,EAEA,OAAOD,EAAQC,EAAQ,CAErB,GADI,CAACD,GACD,CAACA,EAAO,aAAa,sBAAsB,EAAG,OAElD,GAAI,CAACE,EAAKC,CAAG,EAAIH,EAAO,aAAa,sBAAsB,EAAE,MAAM,GAAG,EAElEA,EAAO,MAAM,OAASE,GACxBD,EAAO,KAAK,sBAAsBC,CAAG,aAAa,EAEhDF,EAAO,MAAM,OAASG,GACxBF,EAAO,KAAK,qBAAqBE,CAAG,aAAa,CAErD,EAEA,aAAaH,EAAQC,EAAQ,CACP,4CAEH,KAAKD,EAAO,KAAK,GAChCC,EAAO,KAAK,kBAAkB,CAElC,CACF,EAEOG,EAAQL,ECjCR,IAAMM,EAAYC,GAChBA,EAAO,aAAa,YAAY,EFKzC,IAAOC,EAAP,cAA6B,YAAW,CAGtC,SAAU,CACR,KAAK,iBAAiB,QAASC,GAAU,CACvCA,EAAM,aAAa,cAAe,sCAAsC,CAC1E,CAAC,CACH,CA8BA,cAAc,CAAE,OAAQ,CAAE,YAAAC,CAAY,EAAG,OAAAC,CAAO,EAAG,CACjD,IAAIF,EAAQG,EAASD,CAAM,EACvB,CAACE,CAAe,EAAI,KAAK,cAAc,OACxCC,GAASA,EAAK,aAAa,YAAY,GAAKL,CAC/C,EAEAI,EAAgB,UAAY,GAE5B,IAAIE,EAAS,CAAC,EAEVJ,EAAO,aAAa,wBAAwB,GAC9CK,EAAoB,SAASL,EAAQI,CAAM,EAGzCJ,EAAO,aAAa,sBAAsB,GAC5CK,EAAoB,OAAOL,EAAQI,CAAM,EAGvCJ,EAAO,aAAa,4BAA4B,GAClDK,EAAoB,aAAaL,EAAQI,CAAM,EAGjD,QAAQ,IAAI,SAAUA,CAAM,EACzBA,EAAO,OACRA,EAAO,QAAQE,GAAS,CACxBJ,EAAgB,WAAa,qCAAqCI,CAAK,SACvEJ,EAAgB,MAAM,WAAa,SACrC,CAAC,EAECA,EAAgB,MAAM,WAAa,WAEvC,CACF,EApEEK,EADKV,EACE,UAAU,CAAC,YAAa,QAAQ",
  "names": ["src_exports", "__export", "input_validator_default", "__toCommonJS", "import_stimulus", "StandardValidations", "target", "errors", "min", "max", "standard_validations_default", "getField", "target", "input_validator_default", "field", "validations", "target", "getField", "errorsContainer", "item", "errors", "standard_validations_default", "error", "__publicField"]
}
